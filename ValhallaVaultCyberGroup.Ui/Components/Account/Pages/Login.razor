@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberGroup.Ui.Data
@using ValhallaVaultCyberGroup.Ui.Components.Account.Pages.Manage


@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>
<br />
<h1 class="row justify-content-center text-dark text-center">Log in</h1>
<div class="row justify-content-center text-center">
    <div class="container col-md-9 text-center" style="min-width: 500px">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                
                <hr />
                <ValidationSummary class="text-danger" role="alert"  />
                <div class="form-floating mb-3 " >
                
                        <p></p>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.UserName" class="form-control custom-border" autocomplete="username" aria-required="true" placeholder="usernamexample" />
                        <label for="username">Username</label>
                        <ValidationMessage For="() => Input.UserName" class="text-danger" />

                    </div>
                  
                </div>
                <div class="form-floating mb-3 ">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control " autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                  
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label dark-remember-me-label text-dark">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="dark-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-dark custom-border text-white">Log in</button>
                    <br />
                    <br />
                </div>
                <div class="row justify-content-center text-center mt-4">
                    <div class="col-md-9 text-center">
                        <div class="row">
                            <div class="col">
                                <a href="Account/ForgotPassword" class="text-dark">Forgot your password?</a>
                            </div>
                            <div class="col">
                                <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-dark">Register as a new user</a>
                            </div>
                            <div class="col">
                                <a href="Account/ResendEmailConfirmation" class="text-dark">Resend email confirmation</a>
                            </div>
                        </div>
                    </div>
                </div>

			</EditForm>
        </section>
    </div>

</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure: true);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
     

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "User Name")]
        public string UserName { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
