@page "/"
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberGroup.App.Managers
@using ValhallaVaultCyberGroup.Data.Models.Domain
@using ValhallaVaultCyberGroup.Data.Models.Result
@using ValhallaVaultCyberGroup.Ui.Components.Account.Pages.Manage
@using ValhallaVaultCyberGroup.Ui.Components.Reusable_Components
@using ValhallaVaultCyberGroup.Ui.Data


@inject QuestionManager questionManager
@inject ResultManager ResultManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer



<AuthorizeView>

<NotAuthorized>


    <LandingPageComponent/>


</NotAuthorized>






    <Authorized Context="authContext">


        <!--Här visas kategorie, segment, subkategori i drow down meny -->

@if(isTestOpen ==false)
{

<div class="d-flex flex-column" style = "width:70vw;">
@if (Categories != null)
{
    @foreach(var category in Categories)
    {
          <Category PreviousComplete=true>
        <Title>
            <h1>@category.Name</h1>
        </Title>

           <Body>
              
                @foreach(var segment in category.Segments)
                {
                        <Category IsSegment=true PreviousComplete=@previousSegmentComplete>
                        <Title>
                            <h2>@segment.Name</h2>
                        </Title>

                        <Body>
                           
                            @foreach(var subCategory in segment.SubCategories)
                            {
                                <Category IsSubcategory=true PreviousComplete=previousSubcatComplete>
                                    
                                <Title>
                                    <div style="display: flex; justify-content: space-between; align-items: center; width:100%; padding:0px 10px">
                                        <h3 style="margin: 0;">@subCategory.Name</h3>
                                        <button class="btn btn-outline-light" style="margin-left: 10px;" @onclick="()=>StartTest(subCategory)">Start test</button>
                                    </div>
                                </Title>
                                    
                            </Category>
                            <span style="display:none">
                            @(() => SetPreviousSub(subCategory.Id, segment.Id))
                            </span>
                            }
                        </Body>

                    </Category>
                 <span style="display:none">
                @(() => SetPreviousSeg(segment.Id))
                </span>
                }
               
           </Body>
        </Category>
    }
  
    
    
}
</div>

}
<!--Om man trycker på starta test så hamnar man här och ser provet-->

@if (isTestOpen == true)
{
   <QuestionForm>

       <Header>
           <h2>@selectedSubCategory.Name</h2>
       </Header>

       <Body>
                    <EditForm Model="@ResultsSubCateogry" Context="formContext" FormName="QuizForm">

                        @foreach(var question in selectedSubCategory.Questions)
            {
                <Question>
                    <Text>
                        <p class="font-weight-bold">@question.Text</p>
                    </Text>
                </Question>

           <InputRadioGroup @bind-Value="ResultsSubCateogry.ResultQuestions">

                @foreach(var response in question.Responses)
                {

                    <label>@response.Text</label>

                    <InputRadio Value="@response.IsRightAnswer"></InputRadio>
                    <br />

                }
          </InputRadioGroup>

            }

        </EditForm>
       </Body>

   </QuestionForm>
}


</Authorized>
</AuthorizeView>




 
@code
{

    private QuestionModel newQuestion = new();
    private ResponseModel selectedResponse = new();
    private List<ResponseModel> responses = new(); 
    private ResultSubCategoryModel ResultsSubCateogry= new();
    private SubCategoryModel selectedSubCategory = new();
    private bool isTestOpen = false; 
    private List<CategoryModel> Categories = new();
    private bool previousSegmentComplete = true;
    private bool previousSubcatComplete = true;

    private ResultModel? userSavedResults;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {

        Categories = await questionManager.GetAllCategoriesAsync();


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.Identity.Name;

        if(_userId != null)
        {
            userSavedResults = await ResultManager.GetByUserIdAsync(_userId);
        }



    }


    private void StartTest(SubCategoryModel subCategory)
    {
        isTestOpen = true;
        selectedSubCategory = subCategory;
    }

    private void SetPreviousSeg(int segId)
    {
        previousSegmentComplete = userSavedResults.ResultSegments.Where(rs => rs.SegmentModelId == segId).First().IsCompleted;
    }

    private void SetPreviousSub(int subId, int segId)
    {
        previousSubcatComplete = userSavedResults.ResultSegments.FirstOrDefault(rs => rs.SegmentModelId == segId).ResultSubCategories.FirstOrDefault(rsc => rsc.SubCategoryModelId == subId).IsCompleted;
    }
}
