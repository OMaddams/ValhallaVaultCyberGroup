@page "/"
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberGroup.App.Managers
@using ValhallaVaultCyberGroup.Data.Models.Domain
@using ValhallaVaultCyberGroup.Data.Models.Result
@using ValhallaVaultCyberGroup.Ui.Components.Account.Pages.Manage
@using ValhallaVaultCyberGroup.Ui.Components.Reusable_Components
@using ValhallaVaultCyberGroup.Ui.Data


@inject QuestionManager questionManager
@inject ResultManager ResultManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer



<AuthorizeView>

<NotAuthorized>


    <LandingPageComponent/>


</NotAuthorized>

    <Authorized Context="authContext">


        <!--Här visas kategorie, segment, subkategori i drow down meny -->

@if(isTestOpen ==false)
{

<div class="d-flex flex-column" style = "align-self:center;">
@if (Categories != null)
{
    @foreach(var category in Categories)
    {
        <Category PreviousComplete=true>
        <Title>
                                <h1>@category.Name   <span>@DisplayCompletedSubcategoriesInCategory(category.Id)</span> </h1>

                            </Title>
                            <Body>

                                @foreach (var segment in category.Segments)
                                {
                                    // Beräkna antalet avklarade subkategorier i segmentet
                                    var completedSubcategories = CountCompletedSubcategoriesInSegment(category.Id, segment.Id);

                                    <Category IsSegment=true PreviousComplete=@(segment.PreviousSegmentId == null ? true : GetPreviousSeg(segment.PreviousSegmentId))>
                                        <Title>
                                            <h1>@segment.Name</h1>

                                            @if (segment.PreviousSegmentId == null ? false : !GetPreviousSeg(segment.PreviousSegmentId))
                                            {
                                                <i class="glyphicon glyphicon-lock"></i>
                                            }
                                            else if (!IsSegmentCompleted(category.Id, segment.Id))
                                            {
                                                <progress max="@segment.SubCategories.Count" value="@completedSubcategories">
                                                </progress>
                                            }
                                            else if (IsSegmentCompleted(category.Id, segment.Id))
                                            {
                                                <i class="glyphicon glyphicon-ok"></i>
                                            }

                                                
                                          
                                        </Title>

                        <Body>
                           
                            @foreach(var subCategory in segment.SubCategories)
                            {
                                <Category IsSubcategory=true PreviousComplete=@(subCategory.PreviousSubCategoryId == null ? true : GetPreviousSub(subCategory.PreviousSubCategoryId, segment.Id))>
                                <Title>
                                    
                                    <div style="display: flex; justify-content: space-between; align-items: center; width:100%; padding:0px 10px">
                                                            <h3 style="margin: 0;">@subCategory.Name </h3>
                                        <button class="subcat-button" style="margin-left: 10px;" @onclick="()=>StartTest(subCategory)">Start test</button>
                                    </div>

                                </Title>
                                    
                            </Category>
                            
                            }
                        </Body>

                    </Category>
                
                }
               
           </Body>
           
        </Category>

            <span style="display:none">
                @{
                    ResetPrev();
                }
            </span>
                         

            }
  
    
    
}
</div>

}
<!--Om man trycker på starta test så hamnar man här och ser provet-->


@if (isTestOpen == true )
{
    @if(isTestFinished ==false)
    {
            <QuestionForm>
                
       <Header>
                        <div style="flex: 1; display: flex; align-items: flex-end;">
                            <button class="subcat-button" style="margin-left: auto;" @onclick="GoBack">Quit test</button>
                        </div>
           <h2>@selectedSubCategory.Name</h2>

       </Header>

       <Body>
                       
                   <EditForm Model="@selectedSubCategory" Context="formContext" FormName="QuizForm"    OnSubmit="HandleSubmit">
                            
                        @foreach(QuestionModel question in selectedSubCategory.Questions)
                       {

                               
                            <div style="border-bottom: 1px solid black; padding-bottom: 10px; margin-top: 20px">
                            <label style="font-weight:bold; font-style:italic">@question.Text</label>

                             <InputRadioGroup  Name="@question.Text" @bind-Value=question.selectedResponseModelId >

                        <div style="margin:20px;">
                            @foreach(ResponseModel response in question.Responses)
                            {
                                                <DataAnnotationsValidator />
                                                <ValidationSummary />

                                <div style="display:flex; " >
                                                    <InputRadio required style="margin-bottom:15px; margin-right:20px" Value="response.Id"> </InputRadio>
                                            <label style="font-weight:lighter">@response.Text</label>
                                                    
                                    <br />
                                            </div>
                            }
                                        </div>
                                        
                                </InputRadioGroup>
                                    

                                </div>
                        }
                        
                        <p>@Validation</p>
                            <p style="color:red">@Validation</p>
                        <button style="margin-top:50px" class="subcat-button" type="submit"> Finish Test</button>
        </EditForm>
       </Body>
            </QuestionForm>
  }
            @if (isTestFinished)
            {
                <QuestionForm>

                    <Header>
                        <h2>@selectedSubCategory.Name</h2>

                    </Header>

                    <Body>
                        
                            @foreach (QuestionModel question in selectedSubCategory.Questions)
                            {
                                
                            <div style="border-bottom: 1px solid black; padding-bottom: 10px; margin-top: 20px">

                                <label style="font-weight:bold">@question.Text</label>

                                @foreach (ResponseModel response in question.Responses)
                                {
                              
                                @if(question.selectedResponseModelId == response.Id && response.IsRightAnswer==true)
                                {
                                    <div style="display:flex">
                                    <i style="margin-right:20px;"class="glyphicon glyphicon-ok"></i>
                                   
                                        <label style="font-weight:lighter " >@response.Text</label>
                                    <label style="margin-left: 10px; color: green; font-size:small">You guessed the right answer!</label>
                                    </div>
                                    <br />
                                   
                                       
                                }
                                @if(question.selectedResponseModelId ==response.Id && response.IsRightAnswer ==false)
                                {
                                        <div style="display:flex;">
                                            <i style="margin-right:20px;" class="glyphicon glyphicon-remove"></i>

                                            <label style="font-weight:lighter">@response.Text</label>
                                    <label style="margin-left: 10px; color: red; font-size:small">Wrong answer</label>
                                    </div>
                                    <br />
                                    
                                }
                                @if(!(question.selectedResponseModelId == response.Id) && response.IsRightAnswer == true)

                                    {
                                        <div style="display:flex">
                                            <i style="margin-right:20px;" class="glyphicon glyphicon-ok"></i>
                                        <label style="font-weight:lighter">@response.Text</label>
                                    <label style="margin-left: 10px; color: green; font-size:small">Right answer</label>
                                    <br />
                                    </div>
                                    }
                                @if(!(question.selectedResponseModelId==response.Id)&& response.IsRightAnswer == false)
                                {
                                   
                                        <label style="font-weight:lighter">@response.Text</label>
                                    <br />
                                  
                                }

                                }
                            </div>
                            }
                            <button class="subcat-button" style="margin-top:50px" @onclick="GoBack">Go back and save result</button>

                    </Body>
                </QuestionForm>
                
            }    
       }     
    </Authorized>
</AuthorizeView>

<Modal @ref="PassedTestModal">
    <Title><h4> Congratulations! You passed the test! </h4></Title>
    <Body>


    </Body>
    <Footer>
        <button class="subcat-button" @onclick="PassedTestModal.Close">See results</button>
    </Footer>
</Modal>

<Modal @ref="FailedTestModal">
    <Title><h4> You failed the test. You need to have at least 80% right answers to pass.</h4></Title>
    <Body>


    </Body>
    <Footer>

        <button class="subcat-button" @onclick="FailedTestModal.Close">See results</button>
    </Footer>
</Modal>



@code
{
    private string? Validation;
    bool isTestFinished = false;
    bool isTestPassed;
    private Modal PassedTestModal = new();
    private Modal FailedTestModal = new();
    private SubCategoryModel selectedSubCategory = new();
    private bool isTestOpen = false; 
    private List<CategoryModel> Categories = new();
    private bool previousSegmentComplete = true;
    private bool previousSubcatComplete = true;
    private List<ResultQuestionModel> resultquestions = new();

    private ResultModel? userSavedResults;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {

        Categories = await questionManager.GetAllCategoriesAsync();


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.Identity.Name;

        if(_userId != null)
        {
            userSavedResults = await ResultManager.GetByUserIdAsync(_userId);
            UpdateUserCompletionStatus(_userId);
        }

        

    }

    private void ResetPrev()
    {
        previousSubcatComplete = true;
        previousSegmentComplete = true;
    }

    private void StartTest(SubCategoryModel subCategory)
    {
        isTestOpen = true;
        selectedSubCategory = subCategory;
    }

  

    public async Task HandleSubmit()
    {

        foreach (QuestionModel question in selectedSubCategory.Questions)
        {
            ResponseModel selectedResponse = question.Responses.FirstOrDefault(r => r.Id == question.selectedResponseModelId);

            if (selectedResponse.IsRightAnswer)
            {
                ResultQuestionModel resultQuestionModel = new()
                        {
                            QuestionModelId = question.Id,
                            IsCorrect = true
                        };
                resultquestions.Add(resultQuestionModel);

            }

            else if (selectedResponse.IsRightAnswer != true)
            {
                ResultQuestionModel resultQuestionModel = new()
                        {
                            QuestionModelId = question.Id,
                            IsCorrect = false
                        };
                resultquestions.Add(resultQuestionModel);
            }


        }


        await ResultManager.SubmitUserSubCategoryResults(_userId, selectedSubCategory.Id, resultquestions);
        ResultManager.CheckSubcategoryCompletion(_userId, selectedSubCategory.Id);
        ResultManager.CheckSegmentCompletion(_userId, selectedSubCategory.SegmentId);


        bool testResult = CalculateTestResult();
        if (testResult)
        {
            PassedTestModal.Open();
        }
        else
        {
            FailedTestModal.Open();
        }

        isTestFinished = true;
    }


   

    private bool GetPreviousSeg(int? segId)
    {
        return userSavedResults.ResultSegments.FirstOrDefault(rs => rs.SegmentModelId == segId).IsCompleted;


    }

    private bool GetPreviousSub(int? subId, int? segId)
    {
        return userSavedResults.ResultSegments.FirstOrDefault(rs => rs.SegmentModelId == segId).ResultSubCategories.FirstOrDefault(rsc => rsc.SubCategoryModelId == subId).IsCompleted;
    }

    private void UpdateUserCompletionStatus(string userId)
    {

        foreach(var category in Categories)
        {
            foreach(var segment in category.Segments)
            {
                ResultManager.CheckSegmentCompletion(_userId, segment.Id);

                foreach (var subCat in segment.SubCategories)
                {
                    ResultManager.CheckSegmentCompletion(_userId, subCat.Id);
                }
            }
        }


    }



    private bool CalculateTestResult()
    {

        int numberOfQuestions = 0;
        int numberofRightAnswers = 0;

        if (resultquestions != null)
        {

            foreach (ResultQuestionModel results in resultquestions)
            {
                numberOfQuestions++;

                if(results.IsCorrect == true)
                {
                    numberofRightAnswers++;
                }

            }
        }

        if(numberofRightAnswers == 0 || numberofRightAnswers/numberOfQuestions< 0.8)
        {
            isTestPassed = false;
        }
        else
        {
            isTestPassed = true;
        }

        return isTestPassed;


    }

    private void GoBack()
    {
        isTestOpen = false;
        isTestFinished = false;
        foreach (var question in selectedSubCategory.Questions)
        {
            question.selectedResponseModelId = 0; 
        }
        selectedSubCategory = new SubCategoryModel();
        resultquestions.Clear();
        Validation  =null; 
       
    }


    private int CountCompletedSubcategoriesInSegment(int categoryId, int segmentId)
    {
        int completedSubcategories = 0;

        var category = Categories.FirstOrDefault(c => c.Id == categoryId);
        if (category != null)
        {
            var segment = category.Segments.FirstOrDefault(s => s.Id == segmentId);
            if (segment != null)
            {
                foreach (var subCategory in segment.SubCategories)
                {
                    if (GetPreviousSub(subCategory.Id, segmentId))
                    {
                        completedSubcategories++;
                    }
                }
            }
        }

        return completedSubcategories;
    }





    private string DisplayCompletedSubcategoriesInCategory(int categoryId)
    {
        int completedSegments = 0;
        int totalSegments = 0;

        var category = Categories.FirstOrDefault(c => c.Id == categoryId);

        if (category != null)
        {
            foreach (var segment in category.Segments)
            {
                totalSegments++;
                if (GetPreviousSeg(segment.Id))
                {
                    completedSegments++;
                }
            }
        }

        return $"You have completed {completedSegments} subcategory out of {totalSegments}  in this category.";
    }



    private int CountCompletedSegmentsInSubcategory(int categoryId, int segmentId)
    {
        int completedSegments = 0;

        var category = Categories.FirstOrDefault(c => c.Id == categoryId);
        if (category != null)
        {
            var segment = category.Segments.FirstOrDefault(s => s.Id == segmentId);
            if (segment != null)
            {
                foreach (var subCategory in segment.SubCategories)
                {
                    if (GetPreviousSub(subCategory.Id, segmentId))
                    {
                        completedSegments++;
                    }
                }
            }
        }

        return completedSegments;
    }



    // Metod för att visa antalet klarade subkategorier för en subkategori
    private string DisplayCompletedSegmentsInSubcategory(int categoryId, int segmentId)
    {
        int completedSegments = CountCompletedSegmentsInSubcategory(categoryId, segmentId);
        int totalSegments = Categories.FirstOrDefault(c => c.Id == categoryId)?.Segments.FirstOrDefault(s => s.Id == segmentId)?.SubCategories.Count ?? 0;

        return $"You have completed {completedSegments} out of {totalSegments} subcategories in this segment.";
    }



    private bool IsSegmentCompleted(int categoryId, int segmentId)
    {
        var category = Categories.FirstOrDefault(c => c.Id == categoryId);
        if (category != null)
        {
            var segment = category.Segments.FirstOrDefault(s => s.Id == segmentId);
            if (segment != null)
            {
                foreach (var subCategory in segment.SubCategories)
                {
                    if (!GetPreviousSub(subCategory.Id, segmentId))
                    {
                        return false; 
                    }
                }
                return true; 
            }
        }
        return false;
    }


}

 

