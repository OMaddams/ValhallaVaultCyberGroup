@page "/"
@using Microsoft.AspNetCore.Identity
@using ValhallaVaultCyberGroup.App.Managers
@using ValhallaVaultCyberGroup.Data.Models.Domain
@using ValhallaVaultCyberGroup.Data.Models.Result
@using ValhallaVaultCyberGroup.Ui.Components.Account.Pages.Manage
@using ValhallaVaultCyberGroup.Ui.Components.Reusable_Components
@using ValhallaVaultCyberGroup.Ui.Data


@inject QuestionManager questionManager
@inject ResultManager ResultManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer



<AuthorizeView>

<NotAuthorized>


    <LandingPageComponent/>


</NotAuthorized>

    <Authorized Context="authContext">


        <!--Här visas kategorie, segment, subkategori i drow down meny -->

@if(isTestOpen ==false)
{

<div class="d-flex flex-column" style = "align-self:center;">
@if (Categories != null)
{
    @foreach(var category in Categories)
    {
        <Category PreviousComplete=true>
        <Title>
            <h1>@category.Name</h1>
        </Title>

           <Body>
              
                @foreach(var segment in category.Segments)
                {
                        <Category IsSegment=true PreviousComplete=@(segment.PreviousSegmentId == null ? true : GetPreviousSeg(segment.PreviousSegmentId))>
                        <Title>
                            <h2>@segment.Name</h2>
                            
                        </Title>

                        <Body>
                           
                            @foreach(var subCategory in segment.SubCategories)
                            {
                                <Category IsSubcategory=true PreviousComplete=@(subCategory.PreviousSubCategoryId == null ? true : GetPreviousSub(subCategory.PreviousSubCategoryId, segment.Id))>
                                <Title>
                                    
                                    <div style="display: flex; justify-content: space-between; align-items: center; width:100%; padding:0px 10px">
                                        <h3 style="margin: 0;">@subCategory.Name</h3>
                                        <button class="subcat-button" style="margin-left: 10px;" @onclick="()=>StartTest(subCategory)">Start test</button>
                                    </div>
                                </Title>
                                    
                            </Category>
                            
                            }
                        </Body>

                    </Category>
                
                }
               
           </Body>
           
        </Category>

            <span style="display:none">
                @{
                    ResetPrev();
                }
            </span>
                         

            }
  
    
    
}
</div>

}
<!--Om man trycker på starta test så hamnar man här och ser provet-->


@if (isTestOpen == true )
{
    @if(isTestFinished ==false)
    {
            <QuestionForm>

  
    
       <Header>
           <h2>@selectedSubCategory.Name</h2>

       </Header>

       <Body>
                   <EditForm Model="@selectedSubCategory" Context="formContext" FormName="QuizForm" OnSubmit="HandleSubmit">
                        @foreach(QuestionModel question in selectedSubCategory.Questions)
                        {
                            <label>@question.Text</label>

                            @foreach(ResponseModel response in question.Responses)
                            {
                               <InputRadioGroup @bind-Value=question.selectedResponseModelId>
                                   
                                   <InputRadio Value="response.Id">
                                       
                                      
                                   </InputRadio>
                                    <label>@response.Text</label>
                                    <br />
                               </InputRadioGroup>
                            }
                        }
                        <button type="submit"> Finish Test</button>

        </EditForm>
       </Body>
            </QuestionForm>
  }

            @if (isTestFinished)
            {
                <QuestionForm>



                    <Header>
                        <h2>@selectedSubCategory.Name</h2>

                    </Header>

                    <Body>
                        
                            @foreach (QuestionModel question in selectedSubCategory.Questions)
                            {
                                <label>@question.Text</label>

                                @foreach (ResponseModel response in question.Responses)
                                {
                                @if(question.selectedResponseModelId == response.Id && response.IsRightAnswer==true)
                                {
                                    <i class="glyphicon glyphicon-ok"></i>
                                    <input type="radio" checked disabled />
                                    <label>@response.Text</label>
                                    <span style="margin-left: 10px; color: green">You guessed the right answer!</span>
                                    <br />
                                }
                                @if(question.selectedResponseModelId ==response.Id && response.IsRightAnswer ==false)
                                {
                                    <i class="glyphicon glyphicon-remove"></i>
                                    <input type="radio" checked disabled/>
                                    <label>@response.Text</label>
                                    <span style="margin-left: 10px; color: red">Wrong answer</span>
                                    <br />
                                }
                                @if(!(question.selectedResponseModelId == response.Id) && response.IsRightAnswer == true)

                                    {
                                    <i class="glyphicon glyphicon-ok"></i>
                                    <input type="radio" checked disabled />
                                        <label>@response.Text</label>
                                    <span style="margin-left: 10px; color: green">Right answer</span>
                                    <br />
                                    }
                                @if(!(question.selectedResponseModelId==response.Id)&& response.IsRightAnswer == false)
                                {
                                    <input type="radio" disabled />
                                    <label>@response.Text</label>
                                    <br />
                                  
                                }



                

                        
                                    
                              
                                }
                            }
                            <button class="btn btn-primary" @onclick="GoBack">Go back</button>

                    </Body>
                </QuestionForm>
                
            }

            
       }     


      

 


    </Authorized>
</AuthorizeView>

<Modal @ref="PassedTestModal">
    <Title><h4> Congratulations! You passed the test. Press continue to see results!</h4></Title>
    <Body>


    </Body>
    <Footer>
        <button class="btn btn-primary" @onclick="PassedTestModal.Close">See results</button>
    </Footer>
</Modal>

<Modal @ref="FailedTestModal">
    <Title><h4> You failed the test. You need to have at least 80% right answers to pass.</h4></Title>
    <Body>


    </Body>
    <Footer>

        <button class="btn btn-primary" @onclick="FailedTestModal.Close">See results</button>
    </Footer>
</Modal>



@code
{
    bool isTestFinished = false;
    bool isTestPassed;
    private Modal PassedTestModal = new();
    private Modal FailedTestModal = new();
    private SubCategoryModel selectedSubCategory = new();
    private bool isTestOpen = false; 
    private List<CategoryModel> Categories = new();
    private bool previousSegmentComplete = true;
    private bool previousSubcatComplete = true;
    private List<ResultQuestionModel> resultquestions = new();

    private ResultModel? userSavedResults;
    private string _userId;

    protected override async Task OnInitializedAsync()
    {

        Categories = await questionManager.GetAllCategoriesAsync();


        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = user.Identity.Name;

        if(_userId != null)
        {
            userSavedResults = await ResultManager.GetByUserIdAsync(_userId);
            UpdateUserCompletionStatus(_userId);
        }



    }

    private void ResetPrev()
    {
        previousSubcatComplete = true;
        previousSegmentComplete = true;
    }

    private void StartTest(SubCategoryModel subCategory)
    {
        isTestOpen = true;
        selectedSubCategory = subCategory;
    }

    public async Task HandleSubmit()
    {



        foreach(QuestionModel question in selectedSubCategory.Questions)
        {
            ResponseModel selectedResponse = question.Responses.FirstOrDefault(r => r.Id == question.selectedResponseModelId);

            if (selectedResponse.IsRightAnswer)
            {
                ResultQuestionModel resultQuestionModel = new()
                    {
                        QuestionModelId = question.Id,
                        IsCorrect = true
                    };
                resultquestions.Add(resultQuestionModel);

            }

            else if (selectedResponse.IsRightAnswer != true)
            {
                ResultQuestionModel resultQuestionModel = new()
                    {
                        QuestionModelId = question.Id,
                        IsCorrect = false
                    };
                resultquestions.Add(resultQuestionModel);
            }


        }


        await ResultManager.SubmitUserSubCategoryResults(_userId, selectedSubCategory.Id, resultquestions);
        ResultManager.CheckSubcategoryCompletion(_userId, selectedSubCategory.Id);
        ResultManager.CheckSegmentCompletion(_userId, selectedSubCategory.SegmentId);


        bool testResult = CalculateTestResult();
        if (testResult)
        {
            PassedTestModal.Open();
        }
        else
        {
            FailedTestModal.Open();
        }

        isTestFinished = true;

    }


    private bool GetPreviousSeg(int? segId)
    {
        return userSavedResults.ResultSegments.FirstOrDefault(rs => rs.SegmentModelId == segId).IsCompleted;


    }

    private bool GetPreviousSub(int? subId, int? segId)
    {
        return userSavedResults.ResultSegments.FirstOrDefault(rs => rs.SegmentModelId == segId).ResultSubCategories.FirstOrDefault(rsc => rsc.SubCategoryModelId == subId).IsCompleted;
    }

    private void UpdateUserCompletionStatus(string userId)
    {

        foreach(var category in Categories)
        {
            foreach(var segment in category.Segments)
            {
                ResultManager.CheckSegmentCompletion(_userId, segment.Id);

                foreach (var subCat in segment.SubCategories)
                {
                    ResultManager.CheckSegmentCompletion(_userId, subCat.Id);
                }
            }
        }


    }



    private bool CalculateTestResult()
    {

        int numberOfQuestions = 0;
        int numberofRightAnswers = 0;

        if (resultquestions != null)
        {

            foreach (ResultQuestionModel results in resultquestions)
            {
                numberOfQuestions++;

                if(results.IsCorrect == true)
                {
                    numberofRightAnswers++;
                }

            }
        }

        if(numberofRightAnswers == 0 || numberofRightAnswers/numberOfQuestions< 0.8)
        {
            isTestPassed = false;
        }
        else
        {
            isTestPassed = true;
        }

        return isTestPassed;


    }

    private void GoBack()
    {
        isTestOpen = false;
        isTestFinished = false;
    }

}

 

