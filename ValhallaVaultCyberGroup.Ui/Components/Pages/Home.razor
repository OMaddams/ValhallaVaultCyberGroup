@page "/"
@using System.Security.Claims
@using ValhallaVaultCyberGroup.App.Managers
@using ValhallaVaultCyberGroup.Data.Models.Domain
@using ValhallaVaultCyberGroup.Data.Models.Result
@using ValhallaVaultCyberGroup.Ui.Components.Account.Pages.Manage
@using ValhallaVaultCyberGroup.Ui.Components.Reusable_Components
@using ValhallaVaultCyberGroup.Ui.Data
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject QuestionManager questionManager
@inject ResultManager resultManager
@rendermode InteractiveServer



<AuthorizeView>

<NotAuthorized>


    <LandingPageComponent/>


</NotAuthorized>






    <Authorized Context="authContext">


        <!--Här visas kategorie, segment, subkategori i drow down meny -->

@if(isTestOpen ==false)
{

<div class="d-flex flex-column" style = "width:70vw;">
@if (Categories != null)
{
    @foreach(var category in Categories)
    {
          <Category>
        <Title>
            <h2>@category.Name</h2>
        </Title>

           <Body>
              
                @foreach(var segment in category.Segments)
                {
                    <Category>
                        <Title>
                            <h1>@segment.Name</h1>
                        </Title>

                        <Body>
                           
                                @foreach(var subCategory in segment.SubCategories)
                                {
                                <Category>
                                    
                                    <Title>
                                                <div style="display: flex; justify-content: space-between; align-items: center;">
                                                    <h1 style="margin: 0;">@subCategory.Name</h1>
                                                    <button style="margin-left: 10px;" @onclick="()=>StartTest(subCategory)">Start test</button>
                                                </div>
                                       
                                    </Title>
                                    
                                </Category>
                                }
                            </Body>

                    </Category>
                }
               
           </Body>
        </Category>
    }
  
    
    
}
</div>

}
<!--Om man trycker på starta test så hamnar man här och ser provet-->

@if (isTestOpen == true)


{
  <QuestionForm>

       <Header>
           <h2>@selectedSubCategory.Name</h2>

       </Header>

       <Body>
                   <EditForm Model="@selectedSubCategory" Context="formContext" FormName="QuizForm" OnSubmit="HandleSubmit">
                        @foreach(QuestionModel question in selectedSubCategory.Questions)
                        {
                            <label>@question.Text</label>

                            @foreach(ResponseModel response in question.Responses)
                            {
                               <InputRadioGroup @bind-Value=question.selectedResponseModelId>
                                   
                                   <InputRadio Value="response.Id">
                                       
                                      
                                   </InputRadio>
                                    <label>@response.Text</label>
                                    <br />
                               </InputRadioGroup>
                            }
                        }
                        <button type="submit"> Finish Test</button>

        </EditForm>
       </Body>

   </QuestionForm>
} 

</Authorized>
</AuthorizeView>




 
@code
{
    private SubCategoryModel selectedSubCategory = new();
    private bool isTestOpen = false; 
    private List<CategoryModel> Categories = new();
    private ClaimsPrincipal user;
    private string userIdString; 

    protected override async Task OnInitializedAsync()
    {
        Categories = await questionManager.GetAllCategoriesAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        user=authState.User;
        var userId = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (userId != null)
        {
            userIdString= userId.ToString();
        }
    }


    private void StartTest(SubCategoryModel subCategory)
    {
        isTestOpen = true;
        selectedSubCategory = subCategory;
    }

    public async Task HandleSubmit()
    {

        List<ResultQuestionModel> resultquestions = new();

        foreach(QuestionModel question in selectedSubCategory.Questions)
        {
            ResponseModel selectedResponse = question.Responses.FirstOrDefault(r => r.Id == question.selectedResponseModelId);

            if (selectedResponse.IsRightAnswer)
            {
                ResultQuestionModel resultQuestionModel = new()
                    {
                        QuestionModelId = question.Id,
                        IsCorrect = true
                    };
                resultquestions.Add(resultQuestionModel);

            }

            else if (selectedResponse.IsRightAnswer != true)
            {
                ResultQuestionModel resultQuestionModel = new()
                    {
                        QuestionModelId = question.Id,
                        IsCorrect = false
                    };
                resultquestions.Add(resultQuestionModel);
            }


        }


        await resultManager.SubmitUserSubCategoryResults(userIdString, selectedSubCategory.Id, resultquestions);

        isTestOpen =false;

        }
        }
 