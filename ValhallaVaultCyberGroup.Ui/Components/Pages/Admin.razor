@page "/Admin"
@using Microsoft.AspNetCore.Authorization
@using ValhallaVaultCyberGroup.App.Managers
@using ValhallaVaultCyberGroup.Data.Models.Domain
@using ValhallaVaultCyberGroup.Ui.Components.Reusable_Components
@inject QuestionManager questionManager
@inject NavigationManager navmanager
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer


<div class="container">
    <div class="card">
        <div class="card-header">
            <h5>Admin control panel</h5>
        </div>
        <div class="card-body w-100 d-flex flex-column">
           
           <div class="w-100 d-flex justify-content-between">
           @if (isAdding)
            {
                <div>

                <label for="addOption-id">What do you wish to add:</label>
                <InputSelect id="addOption-id" TValue="string" @bind-Value=addOption>
                    <option value="Category"> Category</option>
                    <option value="Segment"> Segment</option>
                    <option value="SubCategory"> Sub Category</option>
                    <option value="Question"> Question</option>
                    <option value="Answer"> Answer</option>
                </InputSelect>
                </div>
            }
                @if (isEditing)
                {
                    
                }
            <div></div>
            <button class="btn btn-primary " style="justify-self:flex-end; width:36px" @onclick=AddButtonClick>@(isAdding? "-" : "+")</button>

            </div>
                <div>
                    
                    @if(isAdding || isEditing && addOption == "Category")
                    {
                        <EditForm Model="@(isAdding ? CategoryToAdd : CategoryToEdit)" OnSubmit="SubmitAddCategory">
                            <label for="category-name">Name:</label>
                            <InputText class="form-control" @(isAdding ? @bind-Value=CategoryToAdd.Name : @bind-Value=CategoryToEdit.Name)></InputText>
                        <button class="btn btn-primary" type="submit">@(isAdding ? "Add" : "Edit" )</button>
                        </EditForm>
                    }
                    @if (isAdding && addOption == "Segment")
                    {
                        <EditForm Model="SegmentToAdd" OnSubmit="SubmitAddSegment">
                            <div>
                                 <label for="category-id">Category Id:</label>
                                 <InputNumber id="category-id" class="form-control" @bind-Value="SegmentToAdd.CategoriesId"></InputNumber>
                            </div>
                            <div>
                                <label for="segment-name">Name:</label>
                                <InputText id="segment-name" class="form-control" @bind-Value=SegmentToAdd.Name></InputText>
                            </div>
                        
                            <button class="btn btn-primary" type="submit">Add</button>
                        </EditForm>
                    }
                    @if (isAdding && addOption == "SubCategory")
                    {
                        <EditForm Model="SubCatToAdd" OnSubmit="SubmitAddSubCat">
                            <div>
                                <label for="segment-id">Segment Id:</label>
                            <InputNumber id="segment-id" class="form-control" @bind-Value="SubCatToAdd.SegmentId"></InputNumber>
                            </div>
                            <div>
                                <label for="subcat-name">Name:</label>
                            <InputText id="subcat-name" class="form-control" @bind-Value=SubCatToAdd.Name></InputText>
                            </div>

                            <button class="btn btn-primary" type="submit">Add</button>
                        </EditForm>
                    }
                    @if (isAdding && addOption == "Question")
                    {
                        <EditForm Model="QuestionToAdd" OnSubmit="SubmitAddQuestion">
                            <div>
                                <label for="subcategory-id">Subcategory Id:</label>
                                <InputNumber id="subcategory-id" class="form-control" @bind-Value="QuestionToAdd.SubCategoryId"></InputNumber>
                            </div>
                            <div>
                            <label for="question-text">Text:</label>
                                <InputText id="question-text" class="form-control" @bind-Value=QuestionToAdd.Text></InputText>
                            </div>

                            <button class="btn btn-primary" type="submit">Add</button>
                        </EditForm>
                    }
                    @if (isAdding && addOption == "Answer")
                    {
                        <EditForm Model="ResponseToAdd" OnSubmit="SubmitAddResponse">
                            <div>
                                <label for="question-id">Question Id:</label>
                                <InputNumber id="question-id" class="form-control" @bind-Value="ResponseToAdd.QuestionId"></InputNumber>
                            </div>
                            <div>
                                <label for="response-text">Text:</label>
                                <InputText id="response-text" class="form-control" @bind-Value=ResponseToAdd.Text></InputText>
                            </div>

                            <button class="btn btn-primary" type="submit">Add</button>
                        </EditForm>
                    }
                @foreach(string error in errorMessages)
                {
                    <p class="text-danger">@error</p>
                }
            </div>
        </div>
    </div>
    <div class="card">
        @if(Categories == null || !Categories.Any())
        {
            <h1>Loading...</h1>
        }
        else
        {
            @foreach(var category in Categories)
            {
                <Category >
                    <Title>
                        <div class="d-flex  justify-content-between">
                            <h4>@category.Name</h4>
                            
                            <EditAndRemove ItemId="@category.Id" Type="Category" EditOrRemove="@EditOrRemove"/>

                            
                        </div>
                    </Title>
                    <Body>
                        @foreach(var segment in category.Segments)
                        {
                            <Category>
                                <Title>
                                    <div class="d-flex  justify-content-between">
                                        <h4>@segment.Name</h4>

                                        <EditAndRemove ItemId="@segment.Id" Type="Segment" EditOrRemove="@EditOrRemove" />


                                    </div>
                                </Title>
                                <Body>
                                    @foreach(var subcategory in segment.SubCategories)
                                    {
                                        <Category>
                                            <Title>
                                                <div class="d-flex  justify-content-between">
                                                    <h4>@subcategory.Name</h4>

                                                    <EditAndRemove ItemId="@subcategory.Id" Type="SubCat" EditOrRemove="@EditOrRemove" />


                                                </div>
                                            </Title>
                                            <Body>
                                                @foreach(var question in subcategory.Questions)
                                                {
                                                    <Category>
                                                        <Title>
                                                            <h4>@question.Text</h4>
                                                        </Title>
                                                        <Body>
                                                            @foreach(var response in question.Responses)
                                                            {
                                                                <p>@response.Text</p>
                                                                <p>Is this the right answer: @response.IsRightAnswer</p>
                                                            }
                                                        </Body>
                                                    </Category>
                                                }
                                            </Body>
                                        </Category>
                                    }
                                </Body>
                            </Category>
                        }
                    </Body>
                </Category>
            }



        }
    </div>
</div>

@code {
    private bool isAdding = false;
    private bool isEditing = false; 
    private string addOption = "";
    private List<string> errorMessages = new();
    public List<CategoryModel>? Categories { get; set; }

    public CategoryModel CategoryToAdd { get; set; } = new();
    public SegmentModel SegmentToAdd { get; set; } = new();
    public SubCategoryModel SubCatToAdd { get; set; } = new();
    public QuestionModel QuestionToAdd { get; set; } = new();
    public ResponseModel ResponseToAdd { get; set; } = new();

    public CategoryModel? CategoryToEdit { get; set; } = new();
    public SegmentModel? SegmentToEdit { get; set; } = new();
    public SubCategoryModel? SubCatToEdit { get; set; } = new();
    public QuestionModel? QuestionToEdit { get; set; } = new();
    public ResponseModel? ResponseToEdit { get; set; } = new();


    protected async override Task OnInitializedAsync()
    {
        Categories = await questionManager.GetAllCategoriesAsync();
    }

    private async void EditOrRemove(string action, string type, int id)
    {
        if(action == "remove")
        {
            switch (type)
            {
                case "Category":
                    {
                        var categoryToRemove = await questionManager.GetCategoryAsync(id);
                        if(categoryToRemove != null)
                        {
                            questionManager.RemoveCategory(categoryToRemove);
                        }
                        break;
                    }
                case "Segment":
                    {
                        var segmentToRemove = await questionManager.GetSegmentAsync(id);
                        if (segmentToRemove != null)
                        {
                            questionManager.RemoveSegmentAsync(segmentToRemove);
                        }
                        break;
                    }
                case "SubCat":
                    {
                        var SubCatToRemove = await questionManager.GetSubCategoryAsync(id);
                        if (SubCatToRemove != null)
                        {
                            questionManager.RemoveSubCategoryAsync(SubCatToRemove);
                        }
                        break;
                    }
                case "Question":
                    {
                        var questionToRemove = await questionManager.GetQuestionAsync(id);
                        if (questionToRemove != null)
                        {
                            questionManager.RemoveQuestionAsync(questionToRemove);
                        }
                        break;
                    }
                case "Response":
                    {
                        var responseToRemove = await questionManager.GetResponseAsync(id);
                        if(responseToRemove != null)
                        {
                            questionManager.RemoveResponseAsync(responseToRemove);
                        }
                        break;
                    }
                default :
                    {
                        break;
                    }

            }
        }
        else if(action == "edit")
        {
            isEditing = true;
            switch (type)
            {
                case "Category":
                    {
                        CategoryToEdit = await questionManager.GetCategoryAsync(id);
                        if(CategoryToEdit != null)
                        {
                            addOption = "Category";
                            
                        }
                        break;
                    }
            }
        }
        StateHasChanged();
    }

    private void AddButtonClick()
    {
        isAdding = !isAdding;
        StateHasChanged();
    }

    private async void SubmitAddCategory()
    {
        errorMessages.Clear();
        if (string.IsNullOrEmpty(CategoryToAdd.Name))
        {
            errorMessages.Add("The category needs a name");
            StateHasChanged();
            return;
        }
        await questionManager.AddCategoryAsync(CategoryToAdd.Name);
        errorMessages.Clear();
        navmanager.NavigateTo("admin", true);

    }

    private async void SubmitAddSegment()
    {
        errorMessages.Clear();
        var category = await questionManager.GetCategoryAsync(SegmentToAdd.CategoriesId);
        if (string.IsNullOrEmpty(SegmentToAdd.Name))
        {
            errorMessages.Add("The segment needs a name");

        }
        if(category == null)
        {
            errorMessages.Add(" The segment needs a valid parent category");
        }
        if(errorMessages.Any())
        {
            StateHasChanged();
            return;
        }
        await questionManager.AddSegmentAsync(SegmentToAdd.Name, SegmentToAdd.CategoriesId);
        errorMessages.Clear();
        navmanager.NavigateTo("admin", true);
    }

    private async void SubmitAddSubCat()
    {
        errorMessages.Clear();
        var segment = await questionManager.GetSegmentAsync(SubCatToAdd.SegmentId);
        if (string.IsNullOrEmpty(SubCatToAdd.Name))
        {
            errorMessages.Add("The subcategory needs a name");

        }
        if(segment == null)
        {
            errorMessages.Add("The subcategory needs a valid parent segment");
        }
        if (errorMessages.Any())
        {
           
            StateHasChanged();
            return;
        }

        await questionManager.AddSubCategoryAsync(SubCatToAdd.Name, SubCatToAdd.SegmentId);
        errorMessages.Clear();
        navmanager.NavigateTo("admin", true);
    }

    private async void SubmitAddQuestion()
    {
        errorMessages.Clear();
        var subCategory = await questionManager.GetSegmentAsync(QuestionToAdd.SubCategoryId);
        if (string.IsNullOrEmpty(QuestionToAdd.Text))
        {
            errorMessages.Add("The question needs Text");

        }
        if (subCategory == null)
        {
            errorMessages.Add("The question needs a valid parent sub category");
        }
        if (errorMessages.Any())
        {
            StateHasChanged();
            return;
        }

        await questionManager.AddQuestionAsync(QuestionToAdd.Text, QuestionToAdd.SubCategoryId);
        errorMessages.Clear();
        navmanager.NavigateTo("admin", true);
    }

    private async void SubmitAddResponse()
    {
        errorMessages.Clear();
        var question = await questionManager.GetQuestionAsync(ResponseToAdd.QuestionId);
        if (string.IsNullOrEmpty(ResponseToAdd.Text))
        {
            errorMessages.Add("The answer / response needs text");

        }
        if (question == null)
        {
            errorMessages.Add("The Response / Answer needs a valid parent question");
        }
        if (errorMessages.Any())
        {
            StateHasChanged();
            return;
        }

        await questionManager.AddResponseAsync(ResponseToAdd.Text, ResponseToAdd.QuestionId);
        errorMessages.Clear();
        navmanager.NavigateTo("admin", true);
    }
}
