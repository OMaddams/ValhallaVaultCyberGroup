// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValhallaVaultCyberGroup.Data.Data;

#nullable disable

namespace ValhallaVaultCyberGroup.Data.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20240305084516_FirstTry")]
    partial class FirstTry
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Grundläggande IT-säkerhet"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Att skydda sig mot bedrägerier"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cybersäkerhet för företag"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cyberspionage"
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("QuestionModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubCategoryId = 1,
                            Text = "Fråga 1"
                        },
                        new
                        {
                            Id = 2,
                            SubCategoryId = 1,
                            Text = "Fråga 2"
                        },
                        new
                        {
                            Id = 3,
                            SubCategoryId = 1,
                            Text = "Fråga 3"
                        },
                        new
                        {
                            Id = 4,
                            SubCategoryId = 1,
                            Text = "Fråga 4"
                        },
                        new
                        {
                            Id = 5,
                            SubCategoryId = 1,
                            Text = "Fråga 5"
                        },
                        new
                        {
                            Id = 6,
                            SubCategoryId = 1,
                            Text = "Fråga 6"
                        },
                        new
                        {
                            Id = 7,
                            SubCategoryId = 1,
                            Text = "Fråga 7"
                        },
                        new
                        {
                            Id = 8,
                            SubCategoryId = 1,
                            Text = "Fråga 8"
                        },
                        new
                        {
                            Id = 9,
                            SubCategoryId = 1,
                            Text = "Fråga 9"
                        },
                        new
                        {
                            Id = 10,
                            SubCategoryId = 1,
                            Text = "Fråga 10"
                        },
                        new
                        {
                            Id = 11,
                            SubCategoryId = 2,
                            Text = "Fråga 1"
                        },
                        new
                        {
                            Id = 12,
                            SubCategoryId = 2,
                            Text = "Fråga 2"
                        },
                        new
                        {
                            Id = 13,
                            SubCategoryId = 2,
                            Text = "Fråga 3"
                        },
                        new
                        {
                            Id = 14,
                            SubCategoryId = 2,
                            Text = "Fråga 4"
                        },
                        new
                        {
                            Id = 15,
                            SubCategoryId = 2,
                            Text = "Fråga 5"
                        },
                        new
                        {
                            Id = 16,
                            SubCategoryId = 2,
                            Text = "Fråga 6"
                        },
                        new
                        {
                            Id = 17,
                            SubCategoryId = 2,
                            Text = "Fråga 7"
                        },
                        new
                        {
                            Id = 18,
                            SubCategoryId = 2,
                            Text = "Fråga 8"
                        },
                        new
                        {
                            Id = 19,
                            SubCategoryId = 2,
                            Text = "Fråga 9"
                        },
                        new
                        {
                            Id = 20,
                            SubCategoryId = 2,
                            Text = "Fråga 10"
                        },
                        new
                        {
                            Id = 21,
                            SubCategoryId = 3,
                            Text = "Fråga 1"
                        },
                        new
                        {
                            Id = 22,
                            SubCategoryId = 3,
                            Text = "Fråga 2"
                        },
                        new
                        {
                            Id = 23,
                            SubCategoryId = 3,
                            Text = "Fråga 3"
                        },
                        new
                        {
                            Id = 24,
                            SubCategoryId = 3,
                            Text = "Fråga 4"
                        },
                        new
                        {
                            Id = 25,
                            SubCategoryId = 3,
                            Text = "Fråga 5"
                        },
                        new
                        {
                            Id = 26,
                            SubCategoryId = 3,
                            Text = "Fråga 6"
                        },
                        new
                        {
                            Id = 27,
                            SubCategoryId = 3,
                            Text = "Fråga 7"
                        },
                        new
                        {
                            Id = 28,
                            SubCategoryId = 3,
                            Text = "Fråga 8"
                        },
                        new
                        {
                            Id = 29,
                            SubCategoryId = 3,
                            Text = "Fråga 9"
                        },
                        new
                        {
                            Id = 30,
                            SubCategoryId = 3,
                            Text = "Fråga 10"
                        },
                        new
                        {
                            Id = 31,
                            SubCategoryId = 4,
                            Text = "Fråga 1"
                        },
                        new
                        {
                            Id = 32,
                            SubCategoryId = 4,
                            Text = "Fråga 2"
                        },
                        new
                        {
                            Id = 33,
                            SubCategoryId = 4,
                            Text = "Fråga 3"
                        },
                        new
                        {
                            Id = 34,
                            SubCategoryId = 4,
                            Text = "Fråga 4"
                        },
                        new
                        {
                            Id = 35,
                            SubCategoryId = 4,
                            Text = "Fråga 5"
                        },
                        new
                        {
                            Id = 36,
                            SubCategoryId = 4,
                            Text = "Fråga 6"
                        },
                        new
                        {
                            Id = 37,
                            SubCategoryId = 4,
                            Text = "Fråga 7"
                        },
                        new
                        {
                            Id = 38,
                            SubCategoryId = 4,
                            Text = "Fråga 8"
                        },
                        new
                        {
                            Id = 39,
                            SubCategoryId = 4,
                            Text = "Fråga 9"
                        },
                        new
                        {
                            Id = 40,
                            SubCategoryId = 4,
                            Text = "Fråga 10"
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.ResponseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRightAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ResponseModels");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.ToTable("SegmentModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriesId = 1,
                            Name = "Segment 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoriesId = 2,
                            Name = "Segment 2"
                        },
                        new
                        {
                            Id = 3,
                            CategoriesId = 3,
                            Name = "Segment 3"
                        },
                        new
                        {
                            Id = 4,
                            CategoriesId = 4,
                            Name = "Segment 4"
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("SubCategoryModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Allmänt om digital säkerhet",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Brandväggar och antivirus-program",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Håll dina program aktuella",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "N/A, Sub-category for Segment 1",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Skydda din anslutning",
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ta hand om dina lösenord",
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Var rädd om dina kortuppgifter",
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "N/A, Sub-category for Segment 2",
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "N/A, Sub-category for Segment 3",
                            SegmentId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "N/A, Sub-category for Segment 3",
                            SegmentId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "N/A, Sub-category for Segment 3",
                            SegmentId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "N/A, Sub-category for Segment 3",
                            SegmentId = 3
                        },
                        new
                        {
                            Id = 13,
                            Name = "N/A, Sub-category for Segment 4",
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 14,
                            Name = "N/A, Sub-category for Segment 4",
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 15,
                            Name = "N/A, Sub-category for Segment 4",
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 16,
                            Name = "N/A, Sub-category for Segment 4",
                            SegmentId = 4
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResultId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultModelId");

                    b.ToTable("ResultCategoryModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionNumber")
                        .HasColumnType("int");

                    b.Property<int>("ResultSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultSubCategoryModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultSubCategoryModelId");

                    b.ToTable("ResultQuestionModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSegmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResultCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultCategoryModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultCategoryModelId");

                    b.ToTable("ResultSegmentModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSubCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResultSegmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ResultSegmentModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultSegmentModelId");

                    b.ToTable("ResultSubCategoryModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ResultModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", "SubCategory")
                        .WithMany("Questions")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.ResponseModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.CategoryModel", "Categories")
                        .WithMany("Segments")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", "Segment")
                        .WithMany("SubCategories")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", null)
                        .WithMany("ResultsCategories")
                        .HasForeignKey("ResultModelId");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultQuestionModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSubCategoryModel", null)
                        .WithMany("ResultQuestions")
                        .HasForeignKey("ResultSubCategoryModelId");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSegmentModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel", null)
                        .WithMany("ResultSegments")
                        .HasForeignKey("ResultCategoryModelId");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSubCategoryModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSegmentModel", null)
                        .WithMany("ResultSubCategories")
                        .HasForeignKey("ResultSegmentModelId");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", "User")
                        .WithOne("Result")
                        .HasForeignKey("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.CategoryModel", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel", b =>
                {
                    b.Navigation("ResultSegments");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSegmentModel", b =>
                {
                    b.Navigation("ResultSubCategories");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultCategoryModel+ResultSubCategoryModel", b =>
                {
                    b.Navigation("ResultQuestions");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", b =>
                {
                    b.Navigation("ResultsCategories");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", b =>
                {
                    b.Navigation("Result")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
