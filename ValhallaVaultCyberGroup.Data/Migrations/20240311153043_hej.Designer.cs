// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ValhallaVaultCyberGroup.Data.Data;

#nullable disable

namespace ValhallaVaultCyberGroup.Data.Migrations
{
    [DbContext(typeof(QuizDbContext))]
    [Migration("20240311153043_hej")]
    partial class hej
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.CategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoryModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Att skydda sig mot bedrägerier"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Cybersäkerhet för företag"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cyberspionage"
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("selectedResponseModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("QuestionModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SubCategoryId = 1,
                            Text = "Du får ett oväntat telefonsamtal från någon som påstår sig vara från din bank. Personen ber dig bekräfta ditt kontonummer och lösenord för att \"säkerställa din kontos säkerhet\" efter en påstådd säkerhetsincident. Hur bör du tolka denna situation?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 2,
                            SubCategoryId = 2,
                            Text = "Efter flera månader av daglig kommunikation med någon du träffade på en datingsida, börjar personen berätta om en plötslig finansiell kris och ber om din hjälp genom att överföra pengar. Vad indikerar detta mest sannolikt?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 3,
                            SubCategoryId = 3,
                            Text = "Du får ett e-postmeddelande/samtal om ett exklusivt erbjudande att investera i ett startup-företag som påstås ha en revolutionerande ny teknologi, med garantier om exceptionellt hög avkastning på mycket kort tid. Hur bör du förhålla dig till erbjudandet?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 4,
                            SubCategoryId = 4,
                            Text = "Efter en online-shoppingrunda märker du oidentifierade transaktioner på ditt kreditkortsutdrag från företag du aldrig handlat från. Vad indikerar detta mest sannolikt?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 5,
                            SubCategoryId = 12,
                            Text = "Efter en online-shoppingrunda märker du oidentifierade transaktioner på ditt kreditkortsutdrag från företag du aldrig handlat från. Vad indikerar detta mest sannolikt?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 6,
                            SubCategoryId = 13,
                            Text = "Inom företaget upptäckts det en sårbarhet i vår programvara som kunde möjliggöra obehörig åtkomst till användardata. Företaget har inte omedelbart en lösning. Vilken är den mest lämpliga första åtgärden?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 7,
                            SubCategoryId = 14,
                            Text = "Vårt företag blir måltavla för en DDoS-attack som överväldigar våra servers och gör våra tjänster otillgängliga för kunder. Vilken typ av aktör är mest sannolikt ansvarig för denna typ av attack?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 8,
                            SubCategoryId = 15,
                            Text = "Med övergången till distansarbete upptäcker vårt företag en ökning av säkerhetsincidenter, inklusive obehörig åtkomst till företagsdata. Vilken åtgärd bör företaget vidta för att adressera denna nya riskmiljö?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 9,
                            SubCategoryId = 16,
                            Text = "Hälsovårdsmyndigheten utsätts för ett cyberangrepp som krypterar patientdata och kräver lösen för att återställa åtkomsten. Vilken typ av angrepp har de sannolikt blivit utsatta för?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 10,
                            SubCategoryId = 17,
                            Text = "Det globala fraktbolaget Maersk blev offer för ett omfattande cyberangrepp som avsevärt störde deras verksamhet världen över. Vilken typ av malware var primärt ansvarig för denna incident?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 11,
                            SubCategoryId = 37,
                            Text = "Regeringen upptäcker att känslig politisk kommunikation har läckt och misstänker elektronisk övervakning. Vilket fenomen beskriver bäst denna situation?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 12,
                            SubCategoryId = 38,
                            Text = "Regeringen blir varse om en sofistikerad skadeprogramskampanj som utnyttjar Zero-day sårbarheter för att infiltrera deras nätverk och stjäla oerhört viktig data. Vilken metod för cyberspionage används sannolikt här?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 13,
                            SubCategoryId = 39,
                            Text = "Regeringen i Sverige ökar sitt interna säkerhetsprotokoll för att skydda sig mot utländska underrättelsetjänsters infiltration. Vilken lagstiftning ger ramverket för detta skydd?",
                            selectedResponseModelId = 0
                        },
                        new
                        {
                            Id = 14,
                            SubCategoryId = 40,
                            Text = "Lunds universitet upptäcker att forskningsdata om ny teknologi har stulits. Undersökningar tyder på en välorganiserad grupp med kopplingar till en utländsk stat. Vilken typ av aktör ligger sannolikt bakom detta?",
                            selectedResponseModelId = 0
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.ResponseModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRightAnswer")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("ResponseModels");

                    b.HasData(
                        new
                        {
                            Id = 10,
                            IsRightAnswer = false,
                            QuestionId = 11,
                            Text = "Cyberkriminalitet"
                        },
                        new
                        {
                            Id = 11,
                            IsRightAnswer = true,
                            QuestionId = 11,
                            Text = "Cyberspionage"
                        },
                        new
                        {
                            Id = 12,
                            IsRightAnswer = false,
                            QuestionId = 11,
                            Text = "Cyberterrorism"
                        },
                        new
                        {
                            Id = 13,
                            IsRightAnswer = false,
                            QuestionId = 10,
                            Text = "Spyware"
                        },
                        new
                        {
                            Id = 14,
                            IsRightAnswer = true,
                            QuestionId = 10,
                            Text = "Ransomware"
                        },
                        new
                        {
                            Id = 15,
                            IsRightAnswer = false,
                            QuestionId = 10,
                            Text = "Adware"
                        },
                        new
                        {
                            Id = 16,
                            IsRightAnswer = false,
                            QuestionId = 9,
                            Text = "Phishing"
                        },
                        new
                        {
                            Id = 17,
                            IsRightAnswer = true,
                            QuestionId = 9,
                            Text = "Ransomware"
                        },
                        new
                        {
                            Id = 18,
                            IsRightAnswer = false,
                            QuestionId = 9,
                            Text = "Spyware"
                        },
                        new
                        {
                            Id = 19,
                            IsRightAnswer = false,
                            QuestionId = 8,
                            Text = "Återgå till kontorsarbete"
                        },
                        new
                        {
                            Id = 20,
                            IsRightAnswer = true,
                            QuestionId = 8,
                            Text = "Införa striktare lösenordspolicyer och tvåfaktorsautentisering för fjärråtkomst"
                        },
                        new
                        {
                            Id = 21,
                            IsRightAnswer = false,
                            QuestionId = 8,
                            Text = "Förbjuda användning av personliga enheter för arbete"
                        },
                        new
                        {
                            Id = 22,
                            IsRightAnswer = false,
                            QuestionId = 7,
                            Text = "En enskild hackare med ett personligt vendetta"
                        },
                        new
                        {
                            Id = 23,
                            IsRightAnswer = false,
                            QuestionId = 7,
                            Text = "En konkurrerande företagsentitet"
                        },
                        new
                        {
                            Id = 24,
                            IsRightAnswer = true,
                            QuestionId = 7,
                            Text = "Organiserade cyberbrottsliga grupper"
                        },
                        new
                        {
                            Id = 25,
                            IsRightAnswer = true,
                            QuestionId = 6,
                            Text = "Informera alla användare om sårbarheten och rekommendera temporära skyddsåtgärder"
                        },
                        new
                        {
                            Id = 26,
                            IsRightAnswer = false,
                            QuestionId = 6,
                            Text = "Ignorera problemet tills en patch kan utvecklas"
                        },
                        new
                        {
                            Id = 27,
                            IsRightAnswer = false,
                            QuestionId = 6,
                            Text = "Stänga ner tjänsten tillfälligt"
                        },
                        new
                        {
                            Id = 28,
                            IsRightAnswer = true,
                            QuestionId = 5,
                            Text = "Utbildning i digital säkerhet för alla anställda"
                        },
                        new
                        {
                            Id = 29,
                            IsRightAnswer = false,
                            QuestionId = 5,
                            Text = "Installera en starkare brandvägg"
                        },
                        new
                        {
                            Id = 30,
                            IsRightAnswer = false,
                            QuestionId = 5,
                            Text = "Byta ut all IT-utrustning"
                        },
                        new
                        {
                            Id = 31,
                            IsRightAnswer = false,
                            QuestionId = 4,
                            Text = "Ett misstag av kreditkortsföretaget"
                        },
                        new
                        {
                            Id = 32,
                            IsRightAnswer = true,
                            QuestionId = 4,
                            Text = "Kreditkortsbedrägeri"
                        },
                        new
                        {
                            Id = 33,
                            IsRightAnswer = false,
                            QuestionId = 4,
                            Text = "Obehöriga köp av en familjemedlem"
                        },
                        new
                        {
                            Id = 34,
                            IsRightAnswer = false,
                            QuestionId = 3,
                            Text = "Genomföra omedelbar investering för att inte missa möjligheten"
                        },
                        new
                        {
                            Id = 35,
                            IsRightAnswer = true,
                            QuestionId = 3,
                            Text = "Investeringsbedrägeri"
                        },
                        new
                        {
                            Id = 36,
                            IsRightAnswer = false,
                            QuestionId = 3,
                            Text = "Begära mer information för att utföra en noggrann due diligence"
                        },
                        new
                        {
                            Id = 37,
                            IsRightAnswer = false,
                            QuestionId = 2,
                            Text = "En legitim begäran om hjälp från en person i nöd"
                        },
                        new
                        {
                            Id = 38,
                            IsRightAnswer = true,
                            QuestionId = 2,
                            Text = "Ett romansbedrägeri"
                        },
                        new
                        {
                            Id = 39,
                            IsRightAnswer = false,
                            QuestionId = 2,
                            Text = "En tillfällig ekonomisk svårighet"
                        },
                        new
                        {
                            Id = 40,
                            IsRightAnswer = false,
                            QuestionId = 1,
                            Text = "Ett legitimt försök från banken att skydda ditt konto"
                        },
                        new
                        {
                            Id = 41,
                            IsRightAnswer = false,
                            QuestionId = 1,
                            Text = "En informationsinsamling för en marknadsundersökning"
                        },
                        new
                        {
                            Id = 42,
                            IsRightAnswer = true,
                            QuestionId = 1,
                            Text = "Ett potentiellt telefonbedrägeri"
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreviousSegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.ToTable("SegmentModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriesId = 1,
                            Name = "Del 1"
                        },
                        new
                        {
                            Id = 2,
                            CategoriesId = 1,
                            Name = "Del 2",
                            PreviousSegmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoriesId = 1,
                            Name = "Del 3",
                            PreviousSegmentId = 2
                        },
                        new
                        {
                            Id = 4,
                            CategoriesId = 2,
                            Name = "Del 1"
                        },
                        new
                        {
                            Id = 5,
                            CategoriesId = 2,
                            Name = "Del 2",
                            PreviousSegmentId = 4
                        },
                        new
                        {
                            Id = 6,
                            CategoriesId = 2,
                            Name = "Del 3",
                            PreviousSegmentId = 5
                        },
                        new
                        {
                            Id = 7,
                            CategoriesId = 2,
                            Name = "Del 4",
                            PreviousSegmentId = 6
                        },
                        new
                        {
                            Id = 8,
                            CategoriesId = 3,
                            Name = "Del 1"
                        },
                        new
                        {
                            Id = 9,
                            CategoriesId = 3,
                            Name = "Del 2",
                            PreviousSegmentId = 8
                        },
                        new
                        {
                            Id = 10,
                            CategoriesId = 3,
                            Name = "Del 3",
                            PreviousSegmentId = 9
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreviousSubCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("SubCategoryModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kreditkortsbedrägeri",
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Romansbedrägeri",
                            PreviousSubCategoryId = 1,
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Investeringsbedrägeri",
                            PreviousSubCategoryId = 2,
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Telefonbedrägeri",
                            PreviousSubCategoryId = 3,
                            SegmentId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bedrägeri i hemmet",
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 6,
                            Name = "Identitetsstöld",
                            PreviousSubCategoryId = 5,
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 7,
                            Name = "Nätfiske och bluffmejl",
                            PreviousSubCategoryId = 6,
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 8,
                            Name = "Investeringsbedrägeri på nätet",
                            PreviousSubCategoryId = 7,
                            SegmentId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Abonnemangsfällor och falska fakturor",
                            SegmentId = 3
                        },
                        new
                        {
                            Id = 10,
                            Name = "Ransomware",
                            PreviousSubCategoryId = 9,
                            SegmentId = 3
                        },
                        new
                        {
                            Id = 11,
                            Name = "Statistik och förhållningssätt",
                            PreviousSubCategoryId = 10,
                            SegmentId = 3
                        },
                        new
                        {
                            Id = 12,
                            Name = "Digital säkerhet på företag",
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 13,
                            Name = "Risker och beredskap",
                            PreviousSubCategoryId = 12,
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 14,
                            Name = "Aktörer inom cyberbrott",
                            PreviousSubCategoryId = 13,
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 15,
                            Name = "Ökad digital närvaro och distansarbete",
                            PreviousSubCategoryId = 14,
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 16,
                            Name = "Cyberangrepp mot känsliga sektorer",
                            PreviousSubCategoryId = 15,
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 17,
                            Name = "Cyberrånet mot Mersk Cyberrånet mot Mersk ",
                            PreviousSubCategoryId = 16,
                            SegmentId = 4
                        },
                        new
                        {
                            Id = 18,
                            Name = "Social engineering",
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 19,
                            Name = "Nätfiske och skräppost",
                            PreviousSubCategoryId = 18,
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 20,
                            Name = "Vishing",
                            PreviousSubCategoryId = 19,
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 21,
                            Name = "Varning för vishing",
                            PreviousSubCategoryId = 20,
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 22,
                            Name = "Identifiera VD-mejl",
                            PreviousSubCategoryId = 21,
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 23,
                            Name = "Öneangrepp och presentkortsbluffar",
                            PreviousSubCategoryId = 22,
                            SegmentId = 5
                        },
                        new
                        {
                            Id = 25,
                            Name = "Virus, maskar och trojaner",
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 26,
                            Name = "Så kan det gå till",
                            PreviousSubCategoryId = 25,
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 27,
                            Name = "Nätverksintrång",
                            PreviousSubCategoryId = 26,
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 28,
                            Name = "Dataintrång",
                            PreviousSubCategoryId = 27,
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 29,
                            Name = "Hackad!",
                            PreviousSubCategoryId = 28,
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 30,
                            Name = "Vägarna in",
                            PreviousSubCategoryId = 29,
                            SegmentId = 6
                        },
                        new
                        {
                            Id = 31,
                            Name = "Utpressningsvirus",
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 32,
                            Name = "Attacker mot servrar",
                            PreviousSubCategoryId = 31,
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 33,
                            Name = "Cyberangrepp i Norden",
                            PreviousSubCategoryId = 32,
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 34,
                            Name = "It-brottslingarnas verktyg",
                            PreviousSubCategoryId = 33,
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 35,
                            Name = "Mirai, Wannacry och fallet Düsseldorf",
                            PreviousSubCategoryId = 34,
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 36,
                            Name = "De sårbara molnen",
                            PreviousSubCategoryId = 35,
                            SegmentId = 7
                        },
                        new
                        {
                            Id = 37,
                            Name = "Allmänt om cyberspionage",
                            SegmentId = 8
                        },
                        new
                        {
                            Id = 38,
                            Name = "Metoder för cyberspionage",
                            PreviousSubCategoryId = 37,
                            SegmentId = 8
                        },
                        new
                        {
                            Id = 39,
                            Name = "Säkerhetsskyddslagen",
                            PreviousSubCategoryId = 38,
                            SegmentId = 8
                        },
                        new
                        {
                            Id = 40,
                            Name = "Cyberspionagets aktörer",
                            PreviousSubCategoryId = 39,
                            SegmentId = 8
                        },
                        new
                        {
                            Id = 41,
                            Name = "Värvningsförsök",
                            SegmentId = 9
                        },
                        new
                        {
                            Id = 42,
                            Name = "Affärsspionage",
                            PreviousSubCategoryId = 41,
                            SegmentId = 9
                        },
                        new
                        {
                            Id = 43,
                            Name = "Påverkanskampanjer",
                            PreviousSubCategoryId = 42,
                            SegmentId = 9
                        },
                        new
                        {
                            Id = 44,
                            Name = "Svensk underrättelsetjänst och cyberförsvar",
                            SegmentId = 10
                        },
                        new
                        {
                            Id = 45,
                            Name = "Signalspaning, informationssäkerhet och 5G",
                            PreviousSubCategoryId = 44,
                            SegmentId = 10
                        },
                        new
                        {
                            Id = 46,
                            Name = "Samverkan mot cyberspionage",
                            PreviousSubCategoryId = 45,
                            SegmentId = 10
                        });
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId")
                        .IsUnique();

                    b.ToTable("ResultModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultQuestionModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionModelId")
                        .HasColumnType("int");

                    b.Property<int>("ResultSubCategoryModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultSubCategoryModelId");

                    b.ToTable("ResultQuestionModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultSegmentModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResultModelId")
                        .HasColumnType("int");

                    b.Property<int>("SegmentModelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultModelId");

                    b.ToTable("ResultSegmentModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultSubCategoryModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("ResultSegmentModelId")
                        .HasColumnType("int");

                    b.Property<int>("SubCategoryModelId")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ResultSegmentModelId");

                    b.ToTable("ResultSubCategoryModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", "SubCategory")
                        .WithMany("Questions")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.ResponseModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.CategoryModel", "Categories")
                        .WithMany("Segments")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", "Segment")
                        .WithMany("SubCategories")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", "User")
                        .WithOne("Result")
                        .HasForeignKey("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", "ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultQuestionModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Result.ResultSubCategoryModel", "ResultSubCategoryModel")
                        .WithMany("ResultQuestions")
                        .HasForeignKey("ResultSubCategoryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultSubCategoryModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultSegmentModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", "ResultModel")
                        .WithMany("ResultSegments")
                        .HasForeignKey("ResultModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultSubCategoryModel", b =>
                {
                    b.HasOne("ValhallaVaultCyberGroup.Data.Models.Result.ResultSegmentModel", "ResultSegmentModel")
                        .WithMany("ResultSubCategories")
                        .HasForeignKey("ResultSegmentModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ResultSegmentModel");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.CategoryModel", b =>
                {
                    b.Navigation("Segments");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.QuestionModel", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SegmentModel", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Domain.SubCategoryModel", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultModel", b =>
                {
                    b.Navigation("ResultSegments");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultSegmentModel", b =>
                {
                    b.Navigation("ResultSubCategories");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Data.Models.Result.ResultSubCategoryModel", b =>
                {
                    b.Navigation("ResultQuestions");
                });

            modelBuilder.Entity("ValhallaVaultCyberGroup.Ui.Data.ApplicationUser", b =>
                {
                    b.Navigation("Result")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
